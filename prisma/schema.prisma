// This is your Prisma schema file,

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// split data model into four subject area
// 1. Clients
// 2. Freelancers
// 3. Job Posts
// 4. Proposals and Contracts
//
// and three standalone tables
// 1. User
// 2. Skill
// 3. PaymentType

// Standalone tables
model User {
  id               String         @id @default(cuid())
  firstName        String?
  lastName         String?
  email            String      @unique
  password         String
  securityQuestion String
  gender           String?
  dateOfBirth      DateTime?
  profilePicture   String?
  isLastLogged     DateTime?
  isVerified       Boolean     @default(false)
  client           Client?
  freelancer       Freelancer?

}

model PaymentType {
  // atleast two values here : 'fixed' and 'per hour'
  id       Int       @id @default(autoincrement())
  name     String    @unique
  contract Contract?
  proposal Proposal?     
  job Job?        
}

model Skill {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  freelancer Freelancer[]
  otherSkill OtherSkills[]
  job Job?
}


// 1. Client Area

// table `Company`
model Company {
  id        Int        @id @default(autoincrement())
  name      String
  location  String
  clients   Client[]
  contracts Contract[]
}

// table `Client`
model Client {
  userId    String    @id
  companyId Int
  joinDate  DateTime  @default(now())
  location  String?
  messages  Message[]
  company   Company?  @relation(fields: [companyId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  job Job?
}

// 2. Freelancers
// table `Freelancer`
model Freelancer {
  // id           Int        @id @default(autoincrement())
  user         User       @relation(fields: [userId], references: [id])
  userId       String     @id 
  username     String     @unique @default(cuid())
  languages    Language[]
  portfolio    String?
  pricePerHour Int?
  // rating Int @default(0)
  location     String
  education    String?
  points       Int
  balance      Int        @default(0)
  messages     Message[]
  contracts    Contract[]
  skills       Skill[]
  tests Test[]
  results TestResults[]
  proposal                Proposal?
  // contract Contract
  // language Language @relation(fields: [languages], references: [id])
}

// table `Language`
model Language {
  id         Int        @id @default(autoincrement())
  name       String @unique
  freelancer Freelancer @relation(fields: [speakerId], references: [userId])
  speakerId  String //FK from Freelancer table
}

// table `Certification`
model Certification {
  id                Int      @id @default(autoincrement())
  name              String
  provider          String
  description       String
  dateEarned        DateTime
  certificationLink String?
}

// table `Test`
model Test{
  id        Int                   @id @default(autoincrement())
  freelancers Freelancer[]
  results TestResults[]
}

// table `TestResults` 
model TestResults{
  freelancer  Freelancer?    @relation(fields: [freelancerId], references: [userId])
  freelancerId   String // relation scalar field (used in the `@relation` attribute above)
  test   Test @relation(fields: [testId], references: [id])
  testId Int // relation scalar field (used in the `@relation` attribute above)
  score Float? // can be null
  displayOnProfile Boolean? // can be null
  testResultsLink String? // can be null
  startTime DateTime @default(now())
  endTime DateTime? // can be null
  createdAt DateTime @default(now())
  @@id([freelancerId, testId])
}




// 3. Job Posts

// table `Job`
model Job {
  id                 Int    @id @default(autoincrement())
  client             Client @relation(fields: [clientId], references: [userId])
  clientId           String //FK from Client table
  expectedDuration   ExpectedDuration? @relation(fields: [expectedDurationId], references: [id])
  expectedDurationId Int //FK from ExpectedDuration table
  complexity Complexity? @relation(fields: [complexityId], references: [id])
  complexityId       Int //FK from Complexity table
  description        String @db.LongText
  mainSkill  Skill @relation(fields: [mainSkillId], references: [id])
  mainSkillId        Int //FK from Skill table
  paymentType PaymentType @relation(fields: [paymentTypeId], references: [id])
  paymentTypeId      Int //FK from PaymentType table
  paymentAmount      Float
  otherSkill OtherSkills[]
  proposal                Proposal?            

}

// table `Expected duration`
model ExpectedDuration {
  id           Int    @id @default(autoincrement())
  durationText String @db.Text
  job Job?
}

model Complexity {
  // 'easy' , 'intermediate' and 'hard'
  id             Int    @id @default(autoincrement())
  complexityText String @unique
  job Job?
}

model OtherSkills {
  job Job @relation(fields: [jobId], references: [id])
  jobId   Int //FK from Job table
  skill Skill @relation(fields: [skillId], references: [id])
  skillId Int //FK from Skill table
  @@id([jobId,skillId])
  // post       Post     @relation(fields: [postId], references: [id])
  // postId     Int // relation scalar field (used in the `@relation` attribute above)
  // category   Category @relation(fields: [categoryId], references: [id])
  // categoryId Int // relation scalar field (used in the `@relation` attribute above)
  // assignedAt DateTime @default(now())
  // assignedBy String
}

// Proposals and Contracts
model ProposalStatusCatalog {
  // values like proposal sent, negotiation phase, proposal withdrawn, proposal rejected,proposal accepted, job started, job finished(successfully), job finished(unsuccessfully)
  id        Int        @id @default(autoincrement())
  name      String     @unique
  messages  Message[]
  proposals Proposal[]


}

model Proposal {
  id                    Int                   @id @default(autoincrement())
  job Job? @relation(fields: [jobId], references: [id])
  jobId                 Int //FK from Job table
  freelancer Freelancer            @relation(fields: [freelancerId], references: [userId])
  freelancerId          String //FK from Freelancer table
  paymentType PaymentType @relation(fields: [paymentTypeId], references: [id])
  paymentTypeId         Int //FK from PaymentType table
  paymentAmount         Float
  proposalStatusCatalog ProposalStatusCatalog @relation(fields: [currentProposalStatus], references: [id])
  currentProposalStatus Int //FK from ProposalStatusCatalog table
  milestones            String
  proposalMessage       String
  hourAmount            Int
  freelancerRating      Int?                  @default(0)
  freelancerComment     String?
  clientRating          Int?                  @default(0)
  clientComment         String?
  messages              Message[]
  createdAt             DateTime              @default(now())
  updatedAt             DateTime?
  contract              Contract?
  // paymentType PaymentType @relation(fields: [paymentTypeId], references: [id])
  // currentProposalStatus   ProposalStatusCatalog @relation(fields: [proposalStatusCatalogId], references: [id])


  // isHired Boolean
  // isViewed Boolean
  // isAvailable Boolean

}

model Contract {
  id            Int         @id @default(autoincrement())
  proposal      Proposal    @relation(fields: [proposalId], references: [id])
  proposalId    Int         @unique //FK from Proposal table
  company       Company     @relation(fields: [companyId], references: [id])
  companyId     Int //FK from Company table
  freelancer    Freelancer  @relation(fields: [freelancerId], references: [userId])
  freelancerId  String //FK from Freelancer table
  paymentType   PaymentType @relation(fields: [paymentTypeId], references: [id])
  paymentTypeId Int         @unique //FK from PaymentType table
  startTime     DateTime
  endTime       DateTime?
  paymentAmount Float
}

model Message {
  id                      Int                   @id @default(autoincrement())
  freelancer              Freelancer            @relation(fields: [freelancerId], references: [userId])
  freelancerId            String //FK from Freelancer table
  client                  Client                @relation(fields: [clientId], references: [userId])
  clientId                String //FK from Client table
  messageTime             DateTime              @default(now())
  text                    String                @db.LongText
  proposal                Proposal              @relation(fields: [proposalId], references: [id])
  proposalId              Int //FK from Proposal table
  currentProposalStatus   ProposalStatusCatalog @relation(fields: [proposalStatusCatalogId], references: [id])
  proposalStatusCatalogId Int //FK from ProposalStatusCatalog table
  attachement             Attachement?
}

model Attachement {
  id        Int     @id @default(autoincrement())
  messageId Int     @unique //FK from Message table
  text      String
  message   Message @relation(fields: [messageId], references: [id])
}
