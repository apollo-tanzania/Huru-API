// This is your Prisma schema file,

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User{
  id Int @id @default(autoincrement())
  firstName String?
  lastName String?
  email String @unique
  password String?
  securityQuestion String
  gender String?
  dateOfBirth DateTime?
  profilePicture String?
  isLastLogged DateTime?
  isVerified Boolean @default(false)
  client Client? 
  freelancer Freelancer?

}

model PaymentType{
  // atleast two values here : 'fixed' and 'per hour'
  id Int @id @default(autoincrement())
  name String @unique
}

model Company{
  id Int @id @default(autoincrement())
  name String
  location String
  clients Client[]
}

model Client{
  userId Int @unique
  companyId Int
  joinDate DateTime @default(now())
  location String?
  messages Message[]
  company Company? @relation(fields: [companyId], references: [id])
  user User @relation(fields: [userId], references: [id])
}


model Freelancer{
  userId Int @id
  username String @unique
  languages Language[]
  portfolio String?
  pricePerHour Int?
  // rating Int @default(0)
  location String
  education String?
  points Int
  balance Int @default(0)
  message Message[]
  user User @relation(fields: [userId], references: [id])
  // language Language @relation(fields: [languages], references: [id])
}

model Language{
  id Int @id @default(autoincrement())
  name String
  freelancer Freelancer @relation(fields: [speakerId], references: [userId])
  speakerId Int //FK from Freelancer table
}

model Certification{
  id Int @id @default(autoincrement())
  name String
  provider String
  description String
  dateEarned DateTime
  certificationLink String?
}

model Skill{
  id Int @id @default(autoincrement())
  name String @unique

}

model Job{
id Int @id @default(autoincrement())
clientId Int //FK from Freelancer table
expectedDurationId Int //FK from ExpectedDuration table
complexityId Int //FK from Complexity table
description String
mainSkillId Int //FK from Skill table
paymentTypeId Int //FK from PaymentType table
paymentAmount Float

}

model ExpectedDuration{
  id Int @id @default(autoincrement())
  durationText String
}

model Complexity{
  // 'easy' , 'intermediate' and 'hard'
  id Int @id @default(autoincrement())
  complexityText String @unique
}
model OtherSkilss{
  id Int @id @default(autoincrement())
  jobId Int //FK from Job table
  skillId Int //FK from Skill table
}

// Proposals and Contracts
model ProposalStatusCatalog{
  // values like proposal sent, negotiation phase, proposal withdrawn, proposal rejected,proposal accepted, job started, job finished(successfully), job finished(unsuccessfully)
  id Int @id @default(autoincrement())
  name String @unique
} 

model Proposal{
  proposalId Int @id
  jobId Int //FK from Job table
  freelancerId Int //FK from Freelancer table
  proposalTime DateTime
  paymentTypeId Int //FK from PaymentType table
  paymentAmount Int
  currentProposalStatus Int //FK from ProposalStatusCatalog table
  milestones String
  proposalMessage String
  hourAmount Int
  freelancerRating Int? @default(0)
  freelancerComment String?
  clientRating Int? @default(0)
  clientComment String?
  message Message[]
  // isHired Boolean
  // isViewed Boolean
  // isAvailable Boolean

}

model Contract{
  id Int @id @default(autoincrement())
  proposalId Int //FK from Proposal table
  companyId Int //FK from Company table
  freelancerId Int //FK from Freelancer table
  startTime DateTime
  endTime DateTime?
  paymentTypeId Int //FK from PaymentType table
  paymentAmount Float

}

model Message{
  id Int @id @default(autoincrement())
  freelancerId Int //FK from Freelancer table
  clientId Int //FK from Client table
  messageTime DateTime @default(now())
  text String
  proposalId Int //FK from Proposal table
  proposalStatusCatalogId Int //FK from ProposalStatusCatalog table
  attachement Attachement?
  freelancer Freelancer @relation(fields: [freelancerId], references: [id])
  client Client @relation(fields: [clientId], references: [id])
  proposal Proposal @relation(fields: [proposalId], references: [id])
  currentProposalStatus ProposalStatusCatalog @relation(fields: [proposalStatusCatalogId], references: [id])
}

model Attachement{
  id Int @id @default(autoincrement())
  messageId Int //FK from Message table
  text String
  message Message @relation(fields: [messageId], references: [id])
}
